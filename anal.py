#!/usr/bin/python
# -*- coding: utf-8 -*-
"""This script takes data files and computes difference between file resources
Input
	Data/*					file containing resources lists, avr and avl score,
	number of trojan detection, link address, md5 name
	links					list of links for malware
Output
	matrixbin				Distance Matrix, detailing difference in malware
	malwareclass			list detailing antivirus score, detailing file 1 - r
"""
import cPickle as pickle
import numpy as np
from scrape import Resource

def substring_sieve(num_files, malware_stats):
	"""Removes elements of list that are substrings of elements already in the list.
	"""
	for i in range(0, num_files-1):
		# sort by longest first.
		malware_stats[0][i].sort(key=lambda s: -len(s))
		sieved_list = []
		# keep if not a substring of another element in final list
		for cur_resource in malware_stats[0][i]:
			if not any([cur_resource in sieve_iter for sieve_iter in sieved_list]):
				sieved_list.append(cur_resource)
		malware_stats[0][i] = sieved_list

def  process_data_files(num_files):
	"""Removes elements of list that are substrings of elements already in the list.
	"""
	files_lists = []
	register_lists = []
	mutex_lists = []
	avr_detected = []
	malware_statistics = [files_lists, register_lists, mutex_lists, avr_detected]
	for k in range(1, num_files):
		resources = pickle.load(open("Data/file" + str(k), "rb"))
		files_lists.append(resources.resources[0])
		register_lists.append(resources.resources[1])
		mutex_lists.append(resources.resources[2])
		if resources.avr < 0.0:
			avr_detected.append(0)
		else:
			avr_detected.append(resources.avr)
	return malware_statistics

def dump_variables(dis_mat, avr_detected):
	pickle.dump(dis_mat, open("matrixbin", "wb"))
	pickle.dump(avr_detected, open("malwareclass", "wb"))

def calc_diff_matrix(malware_stats):
	dis_mat = np.zeros((NUM_FILES, NUM_FILES))
	for x in range(0, NUM_FILES-1):
		for y in range(0, NUM_FILES-1):
			try:
				f_union = list(set(filter(None, malware_stats[0][x])) | set(filter(None, malware_stats[0][y])))
				f_xor = set(filter(None, malware_stats[0][x])) ^ set(filter(None, malware_stats[0][y]))
				f_score = len(list(f_xor))*1.0/len(f_union)
			except ZeroDivisionError:
				f_score = 0.0
			try:
				r_union = list(set(filter(None, malware_stats[1][x])) | set(filter(None, malware_stats[1][y])))
				r_xor = set(filter(None, malware_stats[1][x])) ^ set(filter(None, malware_stats[1][y]))
				r_score = len(list(r_xor))*1.0/len(r_union)
			except ZeroDivisionError:
				r_score = 0.0
			try:
				m_union = list(set(filter(None, malware_stats[2][x])) | set(filter(None, malware_stats[2][y])))
				m_xor = set(filter(None, malware_stats[2][x])) ^ set(filter(None, malware_stats[2][y]))
				m_score = len(list(m_xor))*1.0/len(m_union)
			except ZeroDivisionError:
				m_score = 0.0
			dis_mat[x, y] = f_score
	
if __name__ == "__main__":
	
	NUM_FILES = 250
	
	MALWARE_STATS = process_data_files(NUM_FILES)
	
	substring_sieve(NUM_FILES, MALWARE_STATS)
	
	DIFF_MATRIX = calc_diff_matrix(MALWARE_STATS)
		
	dump_variables(DIFF_MATRIX, MALWARE_STATS[3])
