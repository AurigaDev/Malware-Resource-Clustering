# -*- coding: utf-8 -*-
import os,cPickle as pickle,sys
from scrape import Resource
from collections import Counter
import time

import numpy as np

#############################################   Input                     #########################################
#
#	Data/*					file containing resources lists, avr and avl score, number of trojan detection, link address, md5 name
#	links					list of links for malware

#############################################   Output                     #########################################
#
#	matrixbin				Distance Matrix, detailing difference in malware
#	malwareclass			list detailing antivirus score, detailing file 1 - r

def substring_sieve():
	""" Removes elements of list that are substrings of elements already in the list.
	"""
	for i in range(0,r):
		# sort by longest first.
		malware_files[i].sort(key = lambda s: -len(s))
		out = []
		# keep if not a substring of another element in final list
		for s in malware_files[i]:
			if not any([s in o for o in out]):
				out.append(s)
	malware_files[i] = out

malware_files = []
malware_regs = []
malware_mux = []
malware_class = []


r = 250

for k in range(1,r):
	print k
	resources = pickle.load(open("Data/file"+str(k),"rb"))
	for i in range(0,3):
		if i == 0:
			malware_files.append(resources.resources[i])
		if i == 1:
			malware_regs.append(resources.resources[i])
		if i == 2:
			malware_mux.append(resources.resources[i])
			if resources.avr <0.0:
				malware_class.append(0)
			else:
				malware_class.append(resources.avr)

dis_mat = np.zeros((r, r))

'''
substring_sieve()
'''

for x in range(0, r-1):
	for y in range(0, r-1):
		try:
			f_union = list(set(filter(None, malware_files[x])) | set(filter(None, malware_files[y])))
			f_score = len(list(set(set(filter(None, malware_files[x]))^(set(set(filter(None, malware_files[y])))))))*1.0/len(f_union)
		except ZeroDivisionError:	
			f_score = 0.0
		try:
			r_union = list(set(filter(None, malware_regs[x])) | set(filter(None, malware_regs[y])))
			r_score = len(list(set(set(filter(None, malware_regs[x]))^(set(set(filter(None, malware_regs[y])))))))*1.0/len(r_union)
		except ZeroDivisionError:	
			r_score = 0.0
		try:
			m_union = list(set(filter(None, malware_mux[x])) | set(filter(None, malware_mux[y])))
			m_score = len(list(set(set(filter(None, malware_mux[x]))^(set(set(filter(None, malware_mux[y])))))))*1.0/len(m_union)
		except ZeroDivisionError:	
			m_score = 0.0
		dis_mat[x,y] = f_score
			
pickle.dump( dis_mat, open( "matrixbin", "wb" ) )
pickle.dump( malware_class, open( "malwareclass", "wb" ) )