print(__doc__)

# Code source: Gael Varoquaux
# Modified for documentation by Jaques Grobler
# License: BSD 3 clause
from sklearn import manifold
import numpy as np
import pickle
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from fuzzywuzzy import fuzz

from sklearn.cluster import KMeans
from sklearn import datasets

dis_mat = pickle.load(open("matrixbin","rb"))
label = pickle.load(open("malwareclass","rb"))

dis_max = dis_mat.max()

for i in range (0,499):
	for j in range(0,499):
		dis_mat[i,j] = dis_mat[i,j]/dis_max

aff_mat = np.exp(-1*dis_mat**2)
se = manifold.SpectralEmbedding(
    affinity='precomputed',
    n_components=2,
    n_neighbors=100)
pos2 = se.fit_transform(aff_mat)
for i in range(0,499):
	if pos2[i,0] < 0.42 and pos2[i,0] > 0.4 and pos2[i,1] > 1.15 and pos2[i,1] < 1.25:
		print i

'''		
seed = np.random.RandomState(seed=3)
mds = manifold.MDS(n_components=2, max_iter=3000, eps=1e-9, random_state=seed,
                   dissimilarity="precomputed", n_jobs=1)
pos = mds.fit(dis_mat).embedding_
plt.figure()
'''
plt.figure().add_subplot(111, axisbg="grey")
color = [str(float(item)) for item in label]
plt.scatter(pos2[:, 0], pos2[:, 1], s=20, c=color)

print "D"
plt.show()
'''
centers = [[1, 1], [-1, -1], [1, -1]]
iris = datasets.load_iris()
X = iris.data
y = iris.target

estimators = {'k_means_iris_3': KMeans(n_clusters=2),
              'k_means_iris_8': KMeans(n_clusters=8),
              }


fignum = 1
for name, est in estimators.items():
    fig = plt.figure(fignum, figsize=(4, 3))
    plt.clf()
    ax = Axes3D(fig, rect=[0, 0, .95, 1], elev=48, azim=134)

    plt.cla()
    est.fit(X)
    labels = est.labels_

    ax.scatter(X[:, 3], X[:, 0], X[:, 2], c=labels.astype(np.float))

    ax.w_xaxis.set_ticklabels([])
    ax.w_yaxis.set_ticklabels([])
    ax.w_zaxis.set_ticklabels([])
    ax.set_xlabel('Petal width')
    ax.set_ylabel('Sepal length')
    ax.set_zlabel('Petal length')
    fignum = fignum + 1

# Plot the ground truth
fig = plt.figure(fignum, figsize=(4, 3))
plt.clf()
ax = Axes3D(fig, rect=[0, 0, .95, 1], elev=48, azim=134)

plt.cla()

for name, label in [('Setosa', 0),
                    ('Versicolour', 1),
                    ('Virginica', 2)]:
    ax.text3D(X[y == label, 3].mean(),
              X[y == label, 0].mean() + 1.5,
              X[y == label, 2].mean(), name,
              horizontalalignment='center',
              bbox=dict(alpha=.5, edgecolor='w', facecolor='w'))
# Reorder the labels to have colors matching the cluster results
y = np.choose(y, [1, 2, 0]).astype(np.float)
ax.scatter(X[:, 3], X[:, 0], X[:, 2], c=y)

ax.w_xaxis.set_ticklabels([])
ax.w_yaxis.set_ticklabels([])
ax.w_zaxis.set_ticklabels([])
ax.set_xlabel('Petal width')
ax.set_ylabel('Sepal length')
ax.set_zlabel('Petal length')
plt.show()
'''